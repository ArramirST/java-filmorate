DROP TABLE IF EXISTS users, films, friend, likes, rating, genre, rating_name, genre_name;

CREATE TABLE IF NOT EXISTS users
(
    user_id integer generated by default as identity primary key,
    email varchar(64),
    login varchar(64),
    name varchar(128),
    birthday timestamp
);

CREATE TABLE IF NOT EXISTS films
(
    film_id integer generated by default as identity primary key,
    name varchar(64) not null,
    description varchar(200),
    release_date timestamp,
    duration integer
);

CREATE TABLE IF NOT EXISTS friend
(
    user_id integer,
    friend_id integer,
    status varchar(20),
    CONSTRAINT friend_fk PRIMARY KEY (user_id)
);

CREATE TABLE IF NOT EXISTS likes
(
    like_id integer generated by default as identity primary key,
    film_id integer,
    user_id integer
);

CREATE TABLE IF NOT EXISTS rating
(
    rating_id integer generated by default as identity primary key,
    film_id integer
);

CREATE TABLE IF NOT EXISTS genre
(
    genre_id integer generated by default as identity primary key,
    film_id integer
);

CREATE TABLE IF NOT EXISTS rating_name
(
    rating_id integer,
    rating_name varchar(64)
);

CREATE TABLE IF NOT EXISTS genre_name
(
    genre_id integer,
    genre_name varchar(64)
);

ALTER TABLE likes ADD FOREIGN KEY (film_id) REFERENCES films (film_id);

ALTER TABLE genre ADD FOREIGN KEY (film_id) REFERENCES films (film_id);

ALTER TABLE rating ADD FOREIGN KEY (film_id) REFERENCES films (film_id);

ALTER TABLE likes ADD FOREIGN KEY (user_id) REFERENCES users (user_id);

ALTER TABLE friend ADD FOREIGN KEY (user_id) REFERENCES users (user_id);

ALTER TABLE friend ADD FOREIGN KEY (friend_id) REFERENCES users (user_id);

ALTER TABLE genre_name ADD FOREIGN KEY (genre_id) REFERENCES genre (genre_id);

ALTER TABLE rating_name ADD FOREIGN KEY (rating_id) REFERENCES rating (rating_id);